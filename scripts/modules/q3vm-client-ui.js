/**
 * Q3VM Client UI
 * 
 * UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Q3VM –∫–ª–∏–µ–Ω—Ç–æ–º
 * –ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ client-emulator-ui.js
 * 
 * Features:
 * - Q3VM Client control (start/stop, analysis, dump)
 * - Server Emulator control (start/stop, add bots, player info)
 * - Real-time player stats display (health, armor, weapon)
 * - Integration with VirtualPlayer from server
 * 
 * Version: 1.0.2
 */

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Q3VM –∫–ª–∏–µ–Ω—Ç–∞ (V2 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä WASM/JS)
 */
window.initAndStartQ3VMClient = async function() {
    const button = document.getElementById('initClientButton');
    const status = document.getElementById('clientStatus');
    const canvas = document.getElementById('clientCanvas');
    
    if (!canvas) {
        console.error('[Q3VM UI] Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        updateStatus('clientStatus', '–û—à–∏–±–∫–∞: Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if (!globalQ3Server) {
        addLogEntry('[Q3VM V2] ‚úó –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!', 'error');
        addLogEntry('[Q3VM V2] –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (–∫–Ω–æ–ø–∫–∞ "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")', 'warning');
        updateStatus('clientStatus', '–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω', 'error');
        
        if (button) {
            button.textContent = '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä';
            button.style.background = '#ff9800';
            setTimeout(() => {
                button.textContent = 'üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å Q3VM –∫–ª–∏–µ–Ω—Ç';
                button.style.background = '#4CAF50';
            }, 3000);
        }
        return;
    }
    
    if (!globalQ3Server.isRunning) {
        addLogEntry('[Q3VM V2] ‚úó –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!', 'error');
        addLogEntry('[Q3VM V2] –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ.', 'warning');
        updateStatus('clientStatus', '–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'error');
        
        if (button) {
            button.textContent = '‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
            button.style.background = '#ff9800';
            setTimeout(() => {
                button.textContent = 'üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å Q3VM –∫–ª–∏–µ–Ω—Ç';
                button.style.background = '#4CAF50';
            }, 3000);
        }
        return;
    }
    
    try {
        if (button) {
            button.disabled = true;
            button.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
        }
        
        updateStatus('clientStatus', '–ó–∞–≥—Ä—É–∑–∫–∞ Q3VM...', 'info');
        addLogEntry('[Q3VM V2] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'info');
        addLogEntry('[Q3VM V2] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...', 'info');
        addLogEntry('[Q3VM V2] –ó–∞–ø—É—Å–∫ Q3VM (WASM –∏–ª–∏ JS)...', 'info');
        
        // –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Q3VM –∫–ª–∏–µ–Ω—Ç V2 —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É
        // –í–ê–ñ–ù–û: connectClient –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –í–ù–£–¢–†–ò createQ3VMClientV2 –î–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QVM
        // –≠—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã configstrings –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ CG_Init –≤—ã–∑–æ–≤–µ—Ç trap_GetGameState
        const q3vmClient = await createQ3VMClientV2(canvas, globalQ3Server);
        
        // –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ createQ3VMClientV2, –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        
        addLogEntry('[Q3VM V2] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'success');
        addLogEntry('[Q3VM V2] ‚úì Q3VM –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!', 'success');
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        const clientStatus = q3vmClient.getStatus();
        addLogEntry(`[Q3VM V2] –¢–∏–ø VM: ${clientStatus.vmType ? clientStatus.vmType.toUpperCase() : 'Unknown'}`, 'info');
        addLogEntry(`[Q3VM V2] Client ID: ${clientStatus.clientNum}`, 'info');
        addLogEntry(`[Q3VM V2] Server Time: ${clientStatus.serverTime}`, 'info');
        
        if (clientStatus.vmStats) {
            if (clientStatus.vmStats.instructions) {
                addLogEntry(`[Q3VM V2] VM - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: ${clientStatus.vmStats.instructions}`, 'info');
                addLogEntry(`[Q3VM V2] VM - Syscalls: ${clientStatus.vmStats.syscalls}`, 'info');
            }
            if (clientStatus.vmStats.type) {
                addLogEntry(`[Q3VM V2] VM - –¢–∏–ø: ${clientStatus.vmStats.type}`, 'info');
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        addLogEntry('[Q3VM V2] –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞...', 'info');
        q3vmClient.startRendering();
        
        addLogEntry('[Q3VM V2] ‚úì –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!', 'success');
        addLogEntry('[Q3VM V2] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'success');
        
        const vmTypeEmoji = clientStatus.vmType === 'wasm' ? 'üöÄ' : 'üêå';
        updateStatus('clientStatus', `${vmTypeEmoji} Q3VM ${clientStatus.vmType ? clientStatus.vmType.toUpperCase() : ''} —Ä–∞–±–æ—Ç–∞–µ—Ç`, 'success');
        
        if (button) {
            button.textContent = `‚úì ${clientStatus.vmType ? clientStatus.vmType.toUpperCase() : ''} –∑–∞–ø—É—â–µ–Ω`;
            button.style.background = clientStatus.vmType === 'wasm' ? '#00C853' : '#4CAF50';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        updateQ3VMClientInfo();
        
    } catch (error) {
        console.error('[Q3VM UI] –û—à–∏–±–∫–∞:', error);
        addLogEntry(`[Q3VM V2] ‚úó –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        updateStatus('clientStatus', `–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        
        if (button) {
            button.disabled = false;
            button.textContent = '‚úó –û—à–∏–±–∫–∞';
            button.style.background = '#f44336';
            
            setTimeout(() => {
                button.textContent = 'üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å Q3VM –∫–ª–∏–µ–Ω—Ç';
                button.style.background = '#4CAF50';
            }, 3000);
        }
    }
};

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Q3VM –∫–ª–∏–µ–Ω—Ç–∞
 */
window.stopQ3VMClient = function() {
    const q3vmClient = getQ3VMClientV2();
    
    if (!q3vmClient) {
        addLogEntry('[Q3VM] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω', 'warning');
        return;
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if (globalQ3Server) {
        globalQ3Server.disconnectClient(0);
    }
    
    addLogEntry('[Q3VM] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞...', 'info');
    q3vmClient.shutdown();
    
    updateStatus('clientStatus', 'Q3VM –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
    addLogEntry('[Q3VM] ‚úì –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
    
    const button = document.getElementById('initClientButton');
    if (button) {
        button.textContent = 'üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å Q3VM –∫–ª–∏–µ–Ω—Ç';
        button.style.background = '#4CAF50';
        button.disabled = false;
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Q3VM –∫–ª–∏–µ–Ω—Ç–µ
 */
function updateQ3VMClientInfo() {
    const infoElement = document.getElementById('clientInfo');
    const q3vmClient = getQ3VMClientV2();
    
    if (!infoElement || !q3vmClient) return;
    
    const status = q3vmClient.getStatus();
    
    const vmTypeIcon = status.vmType === 'wasm' ? 'üöÄ' : status.vmType === 'js' ? 'üêå' : '‚ùì';
    const vmTypeName = status.vmType ? status.vmType.toUpperCase() : 'Unknown';
    
    let html = '<div style="font-family: monospace; font-size: 12px; color: #ccc;">';
    html += `<div>${vmTypeIcon} <strong>Q3VM ${vmTypeName} –°—Ç–∞—Ç—É—Å:</strong></div>`;
    html += `<div style="margin-left: 20px;">`;
    html += `  ‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${status.isInitialized ? '‚úì' : '‚úó'}</div>`;
    html += `<div style="margin-left: 20px;">`;
    html += `  ‚Ä¢ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥: ${status.isRunning ? '‚úì' : '‚úó'}</div>`;
    html += `<div style="margin-left: 20px;">`;
    html += `  ‚Ä¢ –¢–∏–ø VM: ${vmTypeName}</div>`;
    html += `<div style="margin-left: 20px;">`;
    html += `  ‚Ä¢ Client ID: ${status.clientNum}</div>`;
    html += `<div style="margin-left: 20px;">`;
    html += `  ‚Ä¢ Server Time: ${status.serverTime}ms</div>`;
    html += `<div style="margin-left: 20px;">`;
    html += `  ‚Ä¢ VM: ${status.hasVM ? '‚úì' : '‚úó'}</div>`;
    
    if (status.vmStats) {
        html += `<div style="margin-top: 10px;">üìä <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VM:</strong></div>`;
        
        if (status.vmStats.type) {
            html += `<div style="margin-left: 20px;">`;
            html += `  ‚Ä¢ –¢–∏–ø: ${status.vmStats.type}</div>`;
        }
        
        if (status.vmStats.instructions) {
            html += `<div style="margin-left: 20px;">`;
            html += `  ‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: ${status.vmStats.instructions}</div>`;
            html += `<div style="margin-left: 20px;">`;
            html += `  ‚Ä¢ Syscalls: ${status.vmStats.syscalls}</div>`;
            html += `<div style="margin-left: 20px;">`;
            html += `  ‚Ä¢ –í—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π: ${status.vmStats.calls}</div>`;
            html += `<div style="margin-left: 20px;">`;
            html += `  ‚Ä¢ –ü—Ä—ã–∂–∫–æ–≤: ${status.vmStats.jumps}</div>`;
        }
    }
    
    html += '</div>';
    
    infoElement.innerHTML = html;
}

/**
 * –î–∞–º–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Q3VM (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
window.dumpQ3VMInfo = function() {
    const q3vmClient = getQ3VMClientV2();
    
    if (!q3vmClient) {
        console.log('[Q3VM] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
        return;
    }
    
    q3vmClient.dump();
};

/**
 * –î–∏–∑–∞—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
window.disassembleQ3VM = function(start = 0, count = 50) {
    const q3vmClient = getQ3VMClientV2();
    
    if (!q3vmClient) {
        console.log('[Q3VM] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
        return;
    }
    
    q3vmClient.loader.disassemble(start, count);
};

/**
 * –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ QVM –º–æ–¥—É–ª—è
 */
window.downloadQ3VMAnalysis = function() {
    const q3vmClient = getQ3VMClientV2();
    
    if (!q3vmClient) {
        addLogEntry('[Q3VM] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω', 'error');
        return;
    }
    
    const analysis = q3vmClient.loader.analyzeModule();
    const status = q3vmClient.getStatus();
    
    const report = {
        timestamp: new Date().toISOString(),
        status: status,
        analysis: analysis,
        syscalls: q3vmClient.syscallHandler.getSyscallStats()
    };
    
    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'q3vm-analysis.json';
    a.click();
    URL.revokeObjectURL(url);
    
    addLogEntry('[Q3VM] –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: q3vm-analysis.json', 'success');
};

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 500ms
setInterval(() => {
    const q3vmClient = getQ3VMClientV2();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if (q3vmClient && q3vmClient.isRunning) {
        updateQ3VMClientInfo();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–Ω (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞)
    if (globalQ3Server) {
        updateServerInfo();
    }
}, 500);

/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 *  –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ï–†–û–ú
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞)
let globalQ3Server = null;

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
 */
window.startClientServer = function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Q3ServerEmulator
    if (typeof window.Q3ServerEmulator === 'undefined') {
        addLogEntry('[Server] ‚ö† Q3ServerEmulator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        updateStatus('serverStatus', '–ú–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
    if (!globalQ3Server) {
        globalQ3Server = new window.Q3ServerEmulator();
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        globalQ3Server.addPlayer(0, 'LocalPlayer');
        addLogEntry('[Server] ‚úì –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω', 'success');
    }
    
    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω - –ø–æ–¥–∫–ª—é—á–∞–µ–º –µ–≥–æ –∫ —Å–µ—Ä–≤–µ—Ä—É
    const q3vmClient = getQ3VMClientV2();
    if (q3vmClient && !q3vmClient.server) {
        q3vmClient.connectToServer(globalQ3Server);
        globalQ3Server.connectClient(0); // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        addLogEntry('[Server] ‚úì –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    globalQ3Server.start(500); // 500ms –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    
    addLogEntry('[Server] ‚úì –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 500ms)', 'success');
    updateStatus('serverStatus', '‚úì –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ', 'success');
    
    const btn = document.getElementById('serverStartBtn');
    if (btn) {
        btn.textContent = '‚úì –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω';
        btn.style.background = '#00C853';
        btn.disabled = true;
    }
    
    updateServerInfo();
};

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
window.stopClientServer = function() {
    if (!globalQ3Server) {
        addLogEntry('[Server] –°–µ—Ä–≤–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω', 'warning');
        return;
    }
    
    globalQ3Server.stop();
    
    addLogEntry('[Server] ‚èπ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
    updateStatus('serverStatus', '–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
    
    const btn = document.getElementById('serverStartBtn');
    if (btn) {
        btn.textContent = '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä';
        btn.style.background = '';
        btn.disabled = false;
    }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
window.addServerBot = function() {
    if (!globalQ3Server) {
        addLogEntry('[Server] –°–µ—Ä–≤–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω', 'warning');
        return;
    }
    
    const botName = `Bot${globalQ3Server.players.size}`;
    const bot = globalQ3Server.addVirtualPlayer(botName);
    
    addLogEntry(`[Server] ‚úì –î–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç: ${botName} (ID: ${bot.id})`, 'success');
    updateServerInfo();
};

/**
 * –î–∞–º–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
window.dumpServerInfo = function() {
    if (!globalQ3Server) {
        console.log('[Server] –°–µ—Ä–≤–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω');
        return;
    }
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('        Q3 SERVER EMULATOR INFO');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('Running:', globalQ3Server.isRunning);
    console.log('Players:', globalQ3Server.players.size);
    console.log('Game Type:', globalQ3Server.gameState.gameType);
    console.log('Match State:', globalQ3Server.gameState.matchState);
    console.log('');
    console.log('Players List:');
    
    for (const [id, player] of globalQ3Server.players) {
        console.log(`  [${id}] ${player.name}`);
        console.log(`      HP: ${player.health} | Armor: ${player.armor}`);
        console.log(`      Weapon: ${player.weapon} | Score: ${player.score}`);
        console.log(`      Position: [${player.origin.map(v => v.toFixed(1)).join(', ')}]`);
    }
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ –≤ UI
 */
function updateServerInfo() {
    const serverInfoElement = document.getElementById('serverInfo');
    const playerInfoElement = document.getElementById('playerInfo');
    
    if (!serverInfoElement || !globalQ3Server) return;
    
    const server = globalQ3Server;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    let html = '<div style="font-family: monospace; font-size: 12px; color: #ccc;">';
    html += '<div><strong>üñ•Ô∏è –°–µ—Ä–≤–µ—Ä:</strong></div>';
    html += '<div style="margin-left: 20px;">';
    html += `  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${server.isRunning ? '‚úì –†–∞–±–æ—Ç–∞–µ—Ç' : '‚úó –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</div>`;
    html += '<div style="margin-left: 20px;">';
    html += `  ‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤: ${server.players.size}</div>`;
    html += '<div style="margin-left: 20px;">';
    html += `  ‚Ä¢ –†–µ–∂–∏–º: ${getGameTypeName(server.gameState.gameType)}</div>`;
    html += '<div style="margin-left: 20px;">';
    html += `  ‚Ä¢ –ú–∞—Ç—á: ${server.gameState.matchState}</div>`;
    html += '</div>';
    
    serverInfoElement.innerHTML = html;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª—å–Ω–æ–º –∏–≥—Ä–æ–∫–µ
    if (playerInfoElement) {
        const localPlayer = server.getPlayer(0); // LocalPlayer
        
        if (localPlayer) {
            const weaponNames = [
                'Gauntlet', 'Machinegun', 'Shotgun', 'Grenade Launcher',
                'Rocket Launcher', 'Lightning Gun', 'Railgun', 'Plasma Gun', 'BFG'
            ];
            
            let playerHtml = '<div style="font-family: monospace; font-size: 11px; color: #ccc;">';
            playerHtml += '<div><strong>üë§ LocalPlayer (ID: 0):</strong></div>';
            playerHtml += '<div style="margin-left: 15px;">';
            
            // –ó–¥–æ—Ä–æ–≤—å–µ —Å —Ü–≤–µ—Ç–æ–º
            const healthColor = localPlayer.health > 100 ? '#00ffff' : 
                               localPlayer.health >= 75 ? '#00ff00' : 
                               localPlayer.health >= 50 ? '#ffff00' : 
                               localPlayer.health >= 25 ? '#ff8800' : '#ff0000';
            playerHtml += `  ‚Ä¢ HP: <span style="color: ${healthColor}; font-weight: bold;">${localPlayer.health}</span></div>`;
            
            // –ë—Ä–æ–Ω—è
            playerHtml += '<div style="margin-left: 15px;">';
            playerHtml += `  ‚Ä¢ Armor: <span style="color: #8888ff;">${localPlayer.armor}</span></div>`;
            
            // –û—Ä—É–∂–∏–µ
            const weaponName = weaponNames[localPlayer.weapon] || 'Unknown';
            playerHtml += '<div style="margin-left: 15px;">';
            playerHtml += `  ‚Ä¢ Weapon: <span style="color: #ffff00;">${weaponName}</span></div>`;
            
            // –ü–æ–∑–∏—Ü–∏—è
            playerHtml += '<div style="margin-left: 15px;">';
            playerHtml += `  ‚Ä¢ Pos: [${localPlayer.origin.map(v => v.toFixed(0)).join(', ')}]</div>`;
            
            playerHtml += '</div>';
            
            playerInfoElement.innerHTML = playerHtml;
        }
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ç–∏–ø–∞
 */
function getGameTypeName(gameType) {
    const types = {
        0: 'FFA',
        1: 'Tournament',
        2: 'Single Player',
        3: 'Team DM',
        4: 'CTF',
        5: '1Flag CTF',
        6: 'Obelisk',
        7: 'Harvester'
    };
    return types[gameType] || 'Unknown';
}

console.log('[Q3VM UI] –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω ‚úì');

