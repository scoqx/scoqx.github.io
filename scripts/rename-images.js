// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ images/
// –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ Node.js: node scripts/rename-images.js

const fs = require('fs');
const path = require('path');

const imagesDir = path.join(__dirname, '..', 'images');
const supportedFormats = ['.jpg', '.jpeg', '.png', '.webp', '.gif'];

function renameImages() {
  try {
    // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ images
    const files = fs.readdirSync(imagesDir);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageFiles = files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return supportedFormats.includes(ext);
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const filesWithStats = imageFiles.map(file => {
      const filePath = path.join(imagesDir, file);
      const stats = fs.statSync(filePath);
      return {
        name: file,
        path: filePath,
        created: stats.birthtime,
        modified: stats.mtime
      };
    }).sort((a, b) => a.created - b.created);
    
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    filesWithStats.forEach((fileInfo, index) => {
      const oldPath = fileInfo.path;
      const ext = path.extname(fileInfo.name).toLowerCase();
      const newName = `${index + 1}${ext}`;
      const newPath = path.join(imagesDir, newName);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
      if (fs.existsSync(newPath) && oldPath !== newPath) {
        console.log(`‚ö†Ô∏è  –§–∞–π–ª ${newName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${fileInfo.name}`);
        return;
      }
      
      try {
        fs.renameSync(oldPath, newPath);
        console.log(`‚úÖ ${fileInfo.name} ‚Üí ${newName}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ ${fileInfo.name}:`, error.message);
      }
    });
    
    console.log('\nüéâ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É images/');
    console.log('–∏ –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –≥–∞–ª–µ—Ä–µ–µ.');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∞–ø–∫–æ–π images:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function createBackup() {
  const backupDir = path.join(__dirname, '..', 'images-backup');
  
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir);
  }
  
  const files = fs.readdirSync(imagesDir);
  const imageFiles = files.filter(file => {
    const ext = path.extname(file).toLowerCase();
    return supportedFormats.includes(ext);
  });
  
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
  
  imageFiles.forEach(file => {
    const sourcePath = path.join(imagesDir, file);
    const backupPath = path.join(backupDir, file);
    fs.copyFileSync(sourcePath, backupPath);
  });
  
  console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø–∞–ø–∫–µ ${backupDir}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.includes('--backup')) {
  createBackup();
}

if (args.includes('--rename') || args.length === 0) {
  renameImages();
}

if (args.includes('--help')) {
  console.log(`
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥–∞–ª–µ—Ä–µ–µ

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/rename-images.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --backup    –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º
  --rename    –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  --help      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/rename-images.js --backup --rename
  node scripts/rename-images.js --backup
  node scripts/rename-images.js
  `);
}



