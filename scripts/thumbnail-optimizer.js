class ThumbnailOptimizer {
    constructor() {
        this.thumbnailCache = new Map();
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const isMobile = this.isMobileDevice();
        this.thumbnailSizes = {
            small: isMobile ? 200 : 150,    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            medium: isMobile ? 400 : 300,   // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            large: isMobile ? 800 : 600     // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        };
        // –ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–µ–≤—å—é (small) - 75%, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
        this.quality = 0.75; // 75% –¥–ª—è –ø—Ä–µ–≤—å—é
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
     */
    isMobileDevice() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
               (window.innerWidth <= 768) ||
               ('ontouchstart' in window);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
     */
    updateQualityForScreenSize() {
        const isMobile = this.isMobileDevice();
        // –ö–∞—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–µ—Ç—Å—è 75% –¥–ª—è –ø—Ä–µ–≤—å—é
        this.quality = 0.75;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        this.thumbnailSizes = {
            small: isMobile ? 200 : 150,
            medium: isMobile ? 400 : 300,
            large: isMobile ? 800 : 600
        };
        
        console.log(`üì± Thumbnail quality updated: ${(this.quality * 100).toFixed(0)}% for ${isMobile ? 'mobile' : 'desktop'}`);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–∏–Ω–∏–∞—Ç—é—Ä—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string} imageSrc - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
     * @param {string} size - –†–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã ('small', 'medium', 'large')
     * @returns {Promise<string>} - Data URL –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä—ã
     */
    async createOptimizedThumbnail(imageSrc, size = 'small') {
        const cacheKey = `${imageSrc}_${size}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.thumbnailCache.has(cacheKey)) {
            return this.thumbnailCache.get(cacheKey);
        }
        
        try {
            const thumbnailSize = this.thumbnailSizes[size];
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const img = await this.loadImage(imageSrc);
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            // –î–ª—è –ø—Ä–µ–≤—å—é (small) –∏—Å–ø–æ–ª—å–∑—É–µ–º 75% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            let width, height;
            if (size === 'small') {
                // –î–ª—è –ø—Ä–µ–≤—å—é –±–µ—Ä–µ–º 75% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                width = Math.round(img.width * 0.75);
                height = Math.round(img.height * 0.75);
            } else {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                const { width: calcWidth, height: calcHeight } = this.calculateDimensions(
                    img.width, 
                    img.height, 
                    thumbnailSize
                );
                width = calcWidth;
                height = calcHeight;
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas
            ctx.drawImage(img, 0, 0, width, height);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JPEG
            const dataUrl = canvas.toDataURL('image/jpeg', this.quality);
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.thumbnailCache.set(cacheKey, dataUrl);
            
            return dataUrl;
        } catch (error) {
            console.warn('Failed to create thumbnail for:', imageSrc, error);
            return imageSrc; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    loadImage(src) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.crossOrigin = 'anonymous';
            img.onload = () => resolve(img);
            img.onerror = () => reject(new Error(`Failed to load image: ${src}`));
            img.src = src;
        });
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
     */
    calculateDimensions(originalWidth, originalHeight, maxSize) {
        const aspectRatio = originalWidth / originalHeight;
        
        let width, height;
        
        // –û–±—ã—á–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        if (aspectRatio > 1) {
            // –®–∏—Ä–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            width = Math.min(maxSize, originalWidth);
            height = width / aspectRatio;
        } else {
            // –í—ã—Å–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            height = Math.min(maxSize, originalHeight);
            width = height * aspectRatio;
        }
        
        return { width: Math.round(width), height: Math.round(height) };
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç lazy loading –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π
     */
    createOptimizedImageElement(originalSrc, alt, size = 'small', className = '') {
        const img = document.createElement('img');
        img.alt = alt;
        img.className = className + ' loading';
        img.loading = 'lazy';
        
        // –î–ª—è –ø—Ä–µ–≤—å—é (small) –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
        if (size === 'small') {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º placeholder –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            img.src = this.createPlaceholder(originalSrc, size);
            
            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é
            this.createOptimizedThumbnail(originalSrc, size).then(optimizedSrc => {
                if (img.src === this.createPlaceholder(originalSrc, size)) {
                    img.src = optimizedSrc;
                    img.classList.remove('loading');
                    img.classList.add('loaded');
                }
            }).catch(error => {
                console.warn('Failed to create optimized thumbnail, using original:', error);
                img.src = originalSrc;
                img.classList.remove('loading');
                img.classList.add('loaded');
            });
        } else {
            // –î–ª—è medium –∏ large –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img.src = originalSrc;
            img.classList.remove('loading');
            img.classList.add('loaded');
        }
        
        return img;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    createPlaceholder(originalSrc, size) {
        const thumbnailSize = this.thumbnailSizes[size];
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        canvas.width = thumbnailSize;
        canvas.height = thumbnailSize;
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—ã–π placeholder
        ctx.fillStyle = '#f0f0f0';
        ctx.fillRect(0, 0, thumbnailSize, thumbnailSize);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "Loading..."
        ctx.fillStyle = '#999';
        ctx.font = '14px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Loading...', thumbnailSize / 2, thumbnailSize / 2);
        
        return canvas.toDataURL();
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à –º–∏–Ω–∏–∞—Ç—é—Ä
     */
    clearCache() {
        this.thumbnailCache.clear();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
     */
    getCacheStats() {
        return {
            size: this.thumbnailCache.size,
            keys: Array.from(this.thumbnailCache.keys())
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.thumbnailOptimizer = new ThumbnailOptimizer();

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ (–ø–æ–≤–æ—Ä–æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
let resizeTimeout;
window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
        window.thumbnailOptimizer.updateQualityForScreenSize();
    }, 300); // Debounce resize events
});
